---
description: 
globs: 
alwaysApply: true
---
# Component Guidelines

## Server vs Client Components
- Prefer React Server Components (RSC) by default
- Add "use client" directive at the top of Client Components
- Keep Client Components small and focused
- Minimize usage of `useEffect`, `useState`, and other client-only hooks
- Avoid mixing server and client code in the same component

## Component Organization
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

## State Management
- Use Jotai for global state management
- Keep state as local as possible
- Follow atom-based architecture for complex state

## UI Components
- Use Shadcn components as the default UI building blocks for consistent design
- If Shadcn components aren't available in `components/ui`, install and add them as needed
- Maintain consistent theming and styling across all components, Use `/src/styles/globals.css`
- For page-specific components:
  - Structure page files as server components when possible `/app/[page]/page.tsx`
  - Place client components in `/app/[page]/components` directory
- Reserve `/src/components` for general, reusable components across the application

## Component Function Conventions

- Pages: Use default function exports
  ```tsx
  export default function Home() {
    // Page implementation
  }
  ```

- Components: Use arrow function exports
  ```tsx
  export const Component = () => {
    // Component implementation
  }
  ```