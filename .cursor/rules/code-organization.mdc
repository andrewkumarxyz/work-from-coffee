---
description: 
globs: 
alwaysApply: true
---
# Code Organization

## High cohesion: Keep related functionality together
- Group functions that work on the same data or functionality
- Place related components in the same directory

## Low coupling: Minimize dependencies between modules
- Use interfaces and abstractions when appropriate
- Avoid direct dependencies between unrelated modules

## Pragmatic approach to coupling and cohesion:
- Balance perfect architecture with practical needs
- Use shared contexts sparingly and with clear boundaries
- Prioritize readability and maintainability over theoretical purity
- Create boundaries between feature modules to prevent unwanted dependencies